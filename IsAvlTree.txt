#include <stdio.h>
#include <stdlib.h>
#include <math.h>
struct node {
int data;
struct node* left;
struct node* right;
};
struct node* newNode(int data) {
struct node* node = (struct node*)malloc(sizeof(struct node));
node->data = data;
node->left = NULL;
node->right = NULL;
return node;
}
int isAVL(struct node* root, int* height) {
if (root == NULL) {
*height = 0;
return 1;
}
int leftHeight = 0, rightHeight = 0;
int isLeftAVL = isAVL(root->left, &leftHeight);
int isRightAVL = isAVL(root->right, &rightHeight);
*height = 1 + (leftHeight > rightHeight ? leftHeight : rightHeight);
if (abs(leftHeight - rightHeight) > 1)
return 0;
return isLeftAVL && isRightAVL;
}
int main() {
struct node* root = newNode(10);
root->left = newNode(5);
root->right = newNode(20);
root->left->left = newNode(2);
root->left->right = newNode(8);
int height = 0;
if (isAVL(root, &height)) {
printf("The tree is an AVL tree.\n");
} else {
printf("The tree is not an AVL tree.\n");
}
return 0;
}