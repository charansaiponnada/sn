#include <stdio.h>
#include <time.h>

int recursiveFib(int n) {
    if (n <= 1)
        return n;
    return recursiveFib(n - 1) + recursiveFib(n - 2);
}

void recursiveFibonacci(int n) {
    printf("Recursive Fibonacci Series: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", recursiveFib(i));
    }
    printf("\n");
}

void dynamicFibonacci(int n) {
    int fib[n];
    fib[0] = 0;
    fib[1] = 1;

    printf("Dynamic Programming Fibonacci Series: %d %d ", fib[0], fib[1]);
    for (int i = 2; i < n; i++) {
        fib[i] = fib[i - 1] + fib[i - 2];
        printf("%d ", fib[i]);
    }
    printf("\n");
}

int main() {
    int n = 10;
    clock_t start, end;
    double time_recursive, time_dynamic;

    start = clock();
    recursiveFibonacci(n);
    end = clock();
    time_recursive = ((double)(end - start)) / CLOCKS_PER_SEC;

    start = clock();
    dynamicFibonacci(n);
    end = clock();
    time_dynamic = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("\nTime Comparison:\n");
    printf("Recursive Method Time: %.6f seconds\n", time_recursive);
    printf("Dynamic Programming Method Time: %.6f seconds\n", time_dynamic);

    return 0;
}
