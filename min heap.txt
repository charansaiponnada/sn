#include <stdio.h>
#define SIZE 100  // Maximum size of the heap

// Function to insert an element into the Min Heap
void insertMinHeap(int arr[], int *n, int num)
{
    int i = *n;          // Start at the end of the heap
    arr[(*n)++] = num;   // Insert new element and increment heap size

    // Maintain the Min Heap property (bubble-up)
    while (i > 0 && arr[(i - 1) / 2] > arr[i])  // Parent must be smaller
    {
        int temp = arr[(i - 1) / 2];
        arr[(i - 1) / 2] = arr[i];
        arr[i] = temp;
        i = (i - 1) / 2;  // Move up to the parent node
    }
}

// Function to display the Min Heap
void printMinHeap(int arr[], int n)
{
    if (n == 0)
    {
        printf("Min heap is empty!\n");
    }
    else
    {
        printf("Min Heap: ");
        for (int i = 0; i < n; i++)
        {
            printf("%d -> ", arr[i]);
        }
        printf("NULL\n");
    }
}

// Main function with a menu-driven program
int main()
{
    int arr[SIZE];  // Array representing the heap
    int n = 0;      // Current size of the heap

    while (1)
    {
        int choice;
        printf("\n1. Insert\n2. Display\n3. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        if (choice == 1)
        {
            int num;
            printf("Enter data to insert: ");
            scanf("%d", &num);
            insertMinHeap(arr, &n, num);  // Insert the number into the heap
        }
        else if (choice == 2)
        {
            printMinHeap(arr, n);  // Display the heap
        }
        else if (choice == 3)
        {
            break;  // Exit the program
        }
        else
        {
            printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
