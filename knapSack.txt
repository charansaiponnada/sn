#include <stdio.h>
#include <time.h>

#define MAX_ITEMS 100
#define MAX_WEIGHT 100

int max(int a, int b) {
    return (a > b) ? a : b;
}

int knapsackDP(int W, int wt[], int val[], int n) {
    int dp[MAX_ITEMS][MAX_WEIGHT];
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;
            } else if (wt[i - 1] <= w) {
                dp[i][w] = max(val[i - 1] + dp[i - 1][w - wt[i - 1]], dp[i - 1][w]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }
    return dp[n][W];
}

int main() {
    int values[] = {3, 4, 5, 6};
    int weight[] = {2, 3, 4, 5};
    int W = 8;
    int n = sizeof(values) / sizeof(values[0]);

    clock_t start, end;
    double cpu_time_used;

    start = clock();
    int maxValue = knapsackDP(W, weight, values, n);
    end = clock();

    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("Maximum value that can be put in knapsack: %d\n", maxValue);
    printf("Execution Time: %f seconds\n", cpu_time_used);
    printf("Theoretical Time Complexity: O(nW)\n");
    printf("Where n = %d (number of items) and W = %d (capacity)\n", n, W);

    return 0;
}
